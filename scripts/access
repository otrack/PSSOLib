#!/usr/bin/env python

import uuid, sys, os
import ConfigParser
sys.path.append(os.path.dirname(os.getcwd()))
from pssolib.types import *
from pssolib.utils import *
import uuid, sys, time, timeit
from multiprocessing import Process
import zklock

if len(sys.argv) != 7:
    print "Usage: {0} <P|Z> <spin|cas> <host1:port1>,<host2:port2>,...  <objectid> <#it> <nap>".format(sys.argv[0])
    sys.exit(1)


it=int(sys.argv[5])
nap=int(sys.argv[6])
    
#PSSOLib stuff

def pssolib_measure(obj,it):
    if obj == 'spin':
        print "PID:"+str(get_thread_ident())+"\t"+str(timeit.timeit(spin_pssolib_access,number=it)/it*1000)
    if obj == 'cas':
        print "PID:"+str(get_thread_ident())+"\t"+str(timeit.timeit(cas_pssolib_access,number=it)/it*1000)

def spin_pssolib_access():
    spin.lock()
    spin.unlock()
    time.sleep(nap*0.001)

def cas_pssolib_access():
    r = cas.compareandswap(str(0),str(0))
    time.sleep(nap*0.001)

# ZK stuff

def zk_measure(obj,it):
    if obj == 'spin':
        print "PID:"+str(get_thread_ident())+"\t"+str(timeit.timeit(spin_zk_access,number=it)/it*1000)
    if obj == 'cas':
            print "PID:"+str(get_thread_ident())+"\t"+str(timeit.timeit(cas_zk_access,number=it)/it*1000)

def spin_zk_access():
    z.acquire()
    time.sleep(nap*0.001)
    z.release()

def cas_zk_access():
    z.acquire()
    z.release()
    time.sleep(nap*0.001)

# Configuration & Evaluation

parser = ConfigParser.ConfigParser()
parser.add_section("main")
parser.set("main","servers",sys.argv[3])
parser.set("main","keyspace","access")
cfg = Config.create(parser,False)

if sys.argv[1]=="P":
    id1=uuid.UUID(sys.argv[4])
    spin = Spinlock(id1)
    cas = Cas(id1,0)
    pssolib_measure(sys.argv[2],it)

else:
    zklock.connect(sys.argv[3]+":2181")
    z = zklock.Lock(sys.argv[4])
    zk_measure(sys.argv[2],it)

# Closing stdout/err

try:
    sys.stdout.close()
except:
    pass
try:
    sys.stderr.close()
except:
    pass
