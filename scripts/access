#!/usr/bin/env python

import uuid, sys, os, random, datetime
import ConfigParser
sys.path.append(os.path.dirname(os.getcwd()))
from pssolib.types import *
from pssolib.utils import *
import uuid, sys, time, timeit
from multiprocessing import Process
import kazoo
from kazoo.client import KazooClient
from kazoo.exceptions import NodeExistsError
from kazoo.exceptions import BadVersionError


if len(sys.argv) != 7:
    print "Usage: {0} <P|Z> <spin|cas> <host1:port1>,<host2:port2>,...  <objectid> <#it> <nap>".format(sys.argv[0])
    sys.exit(1)


it=int(sys.argv[5])
nap=int(sys.argv[6])
    
#PSSOLib stuff

def pssolib_measure(obj,it):
    if obj == 'spin':
        print "PID:"+str(get_thread_ident())+"\t"+str(timeit.timeit(spin_pssolib_access,number=it)/it*1000)
    if obj == 'cas':
        print "PID:"+str(get_thread_ident())+"\t"+str(timeit.timeit(cas_pssolib_access,number=it)/it*1000)
    if obj == 'cons':
        print "PID:"+str(get_thread_ident())+"\t"+str(timeit.timeit(cons_pssolib_access,number=it)/it*1000)

def spin_pssolib_access():
    spin.lock()
    spin.unlock()
    time.sleep(nap*0.001)

def cas_pssolib_access():
    # a = str(random.randint(0, 1000))
    # b = str(random.randint(0, 1000))
    a = "0"
    b = "0"
    r = cas.compareandswap(a,b)
    print  str(datetime.datetime.utcnow().strftime('%Y%m%d%H%M%S%f')) +" "+str(get_thread_ident())+" "+str(r)+" "+str(a)+" "+str(b)

def cons_pssolib_access():
    r = cons.propose(str(get_thread_ident()))

# ZK stuff

def zk_measure(obj,it):
    if obj == 'spin':
        print "PID:"+str(get_thread_ident())+"\t"+str(timeit.timeit(spin_zk_access,number=it)/it*1000)
    if obj == 'cas':
        print "PID:"+str(get_thread_ident())+"\t"+str(timeit.timeit(cas_zk_access,number=it)/it*1000)

def spin_zk_access():
    lock.acquire()
    lock.release()
    time.sleep(nap*0.001)

def cas_zk_access():
    # a = str(random.randint(0, 1000))
    # b = str(random.randint(0, 1000))
    a = "0"
    b = "0"
    r = cas_zk(a,b)
    print  str(datetime.datetime.utcnow().strftime('%Y%m%d%H%M%S%f')) +" "+str(get_thread_ident())+" "+str(r)+" "+str(a)+" "+str(b)

def cas_zk(a,b):
    t = zk.get(cas)
    if t[0] == a:
        try:
            zk.set(cas,b,(t[1].version))
            return True
        except BadVersionError:
            pass
    return False

# Configuration & Evaluation

if sys.argv[1]=="P":
    parser = ConfigParser.ConfigParser()
    parser.add_section("main")
    parser.set("main","servers",sys.argv[3])
    parser.set("main","keyspace","access")
    cfg = Config.create(parser,False)
    id1=uuid.UUID(sys.argv[4])
    spin = Spinlock(id1)
    cas = Cas(id1,str(0))
    cons = Consensus(id1)
    pssolib_measure(sys.argv[2],it)
else:
    zk = KazooClient(hosts=sys.argv[3])    
    isConnected=False
    while isConnected == False:
        try:
            zk.start()
            isConnected = True
        except:
            pass

    if sys.argv[2] == 'spin':
        lock = zk.Lock("/"+sys.argv[4], "test")
    else:
        try:
            cas = "/"+sys.argv[4]
            zk.create(cas,str(0))
        except NodeExistsError:
            pass
    zk_measure(sys.argv[2],it)
    zk.stop()


# Closing stdout/err

try:
    sys.stdout.close()
except:
    pass
try:
    sys.stderr.close()
except:
    pass
