#!/usr/bin/env python

import uuid, sys, os
import ConfigParser
sys.path.append(os.path.dirname(os.getcwd()))
from pssolib.types import *
from pssolib.utils import *
import uuid, sys
import zklock, time
from multiprocessing import Process
import timeit
import time

if len(sys.argv) != 7:
    print "Usage: {0} <P|Z> <host1:port1>,<host2:port2>,...  <keyspace> <#it> <in_nap> <out_nap>".format(sys.argv[0])
    sys.exit(1)

it=int(sys.argv[4])
in_nap=int(sys.argv[5])
out_nap=int(sys.argv[6])

# Evaluation

if sys.argv[1]=="P":
    parser = ConfigParser.ConfigParser()
    parser.add_section("main")
    parser.set("main","servers",sys.argv[2])
    parser.set("main","keyspace",sys.argv[3])
    cfg = Config.create(parser,False)
    id1=uuid.UUID("de33e26e-8f56-13e2-9bbe-606720d66784")
    spin = Spinlock(id1)
    spin_pssolib_measure(it)
else:
    zklock.connect()
    z = zklock.Lock('test')
    spin_zk_measure(it)
    
#PSSOLib stuff

def spin_pssolib_measure(it):
    print "PID:"+str(get_thread_ident())+"\t"+str(timeit.timeit(spin_pssolib_access,number=it)/it*1000)

def spin_pssolib_access():
    spin.lock()
    time.sleep(in_nap*0.001)
    spin.unlock()
    time.sleep(out_nap*0.001)

# ZK stuff

def spin_zk_measure(it):
    print "PID:"+str(get_thread_ident())+"\t"+str(timeit.timeit(spin_zk_access,number=it)/it*1000)

def spin_zk_access():
    z.acquire()
    time.sleep(in_nap*0.001)
    z.release()
    time.sleep(out_nap*0.001)

# Closing stdout/err

try:
    sys.stdout.close()
except:
    pass
try:
    sys.stderr.close()
except:
    pass
